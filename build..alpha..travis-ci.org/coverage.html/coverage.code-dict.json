{"/home/travis/build/npmtest/node-npmtest-mongo-express/test.js":"/* istanbul instrument in package npmtest_mongo_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-express/lib.npmtest_mongo_express.js":"/* istanbul instrument in package npmtest_mongo_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongo_express = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongo_express = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-express/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongo-express && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongo_express */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongo_express\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongo_express.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongo_express.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongo_express.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongo_express.__dirname + '/lib.npmtest_mongo_express.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/app.js":"#!/usr/bin/env node\n\n'use strict';\n\nconst clc             = require('cli-color');\nconst csrf            = require('csurf');\nconst commander       = require('commander');\nconst express         = require('express');\nconst fs              = require('fs');\nconst https           = require('https');\nconst middleware      = require('./lib/middleware');\nconst utils           = require('./lib/utils');\nconst updateNotifier  = require('update-notifier');\nconst pkg             = require('./package.json');\n\nlet app               = express();\nlet notifier          = updateNotifier({ pkg });\n\nlet config;\nlet defaultPort = 80;\nlet server      = app;\nlet sslOptions;\n\n// Notify of any updates\nnotifier.notify();\n\ntry {\n  // eslint-disable-next-line import/no-unresolved\n  config = utils.deepmerge(require('./config.default'), require('./config'));\n} catch (e) {\n  if (e.code === 'MODULE_NOT_FOUND') {\n    console.log('No custom config.js found, loading config.default.js');\n  } else {\n    console.error(clc.red('Unable to load config.js!'));\n    console.error(clc.red('Error is:'));\n    console.log(clc.red(e));\n    process.exit(1);\n  }\n\n  config = require('./config.default');\n}\n\nif (config.options.console) {\n  console.log('Welcome to mongo-express');\n  console.log('------------------------');\n  console.log('\\n');\n}\n\ncommander\n  .version(require('./package').version)\n  .option('-H, --host <host>', 'hostname or adress')\n  .option('-P, --dbport <host>', 'port of the db')\n  .option('-u, --username <username>', 'username for authentication')\n  .option('-p, --password <password>', 'password for authentication')\n  .option('-a, --admin', 'enable authentication as admin')\n  .option('-d, --database <database>', 'authenticate to database')\n  .option('--port <port>', 'listen on specified port')\n.parse(process.argv);\n\nif (commander.username && commander.password) {\n  config.mongodb.admin = !!commander.admin;\n  if (commander.admin) {\n    config.mongodb.adminUsername = commander.username;\n    config.mongodb.adminPassword = commander.password;\n  } else {\n    let user = {\n      database: commander.database,\n      username: commander.username,\n      password: commander.password,\n    };\n    for (let key in user) {\n      if (!user[key]) {\n        commander.help();\n      }\n    }\n\n    config.mongodb.auth[0] = user;\n  }\n\n  config.useBasicAuth = false;\n}\n\nconfig.mongodb.server = commander.host || config.mongodb.server;\nconfig.mongodb.port = commander.dbport || config.mongodb.port;\n\nconfig.site.port = commander.port || config.site.port;\n\nif (!config.site.baseUrl) {\n  console.error('Please specify a baseUrl in your config. Using \"/\" for now.');\n  config.site.baseUrl = '/';\n}\n\napp.use(config.site.baseUrl, middleware(config));\napp.use(csrf());\n\nif (config.site.sslEnabled) {\n  defaultPort     = 443;\n  sslOptions  = {\n    key:  fs.readFileSync(config.site.sslKey),\n    cert: fs.readFileSync(config.site.sslCert),\n  };\n  server = https.createServer(sslOptions, app);\n}\n\nlet addressString = (config.site.sslEnabled ? 'https://' : 'http://') + (config.site.host || '0.0.0.0') + ':' + (config.site.port || defaultPort);\n\nserver.listen(config.site.port, config.site.host, function () {\n  if (config.options.console) {\n\n    console.log('Mongo Express server listening', 'at ' + addressString);\n\n    if (!config.site.host || config.site.host === '0.0.0.0') {\n      console.error(clc.red('Server is open to allow connections from anyone (0.0.0.0)'));\n    }\n\n    if (config.basicAuth.username === 'admin' && config.basicAuth.password === 'pass') {\n      console.error(clc.red('basicAuth credentials are \"admin:pass\", it is recommended you change this in your config.js!'));\n    }\n\n  }\n})\n.on('error', function (e) {\n  if (e.code === 'EADDRINUSE') {\n    console.log();\n    console.error(clc.red('Address ' + addressString + ' already in use! You need to pick a different host and/or port.'));\n    console.log('Maybe mongo-express is already running?');\n  }\n\n  console.log();\n  console.log('If you are still having trouble, try Googling for the key parts of the following error object before posting an issue');\n  console.log(JSON.stringify(e));\n  return process.exit(1);\n});\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/middleware.js":"'use strict';\n\nconst express     = require('express');\nconst swig        = require('swig-templates');\nconst swigFilters = require('./filters');\nconst router      = require('./router');\n\nconst assets = require('../build-assets.json');\n\nconst middleware = function (config) {\n  const app = express();\n\n  app.locals.assets = assets;\n\n  //Set up swig\n  const swigOptions = {\n    cache: process.env.NODE_ENV === 'production' ? 'memory' : false,\n  };\n  const swigEngine = new swig.Swig(swigOptions);\n  app.engine('html', swigEngine.renderFile);\n  Object.keys(swigFilters).forEach(function (name) {\n    swig.setFilter(name, swigFilters[name]);\n  });\n\n  //App configuration\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'html');\n  app.set('view options', { layout: false });\n\n  app.use('/', router(config));\n\n  app.set('read_only',      config.options.readOnly      || false);\n  app.set('gridFSEnabled',  config.options.gridFSEnabled || false);\n\n  return app;\n};\n\nmodule.exports = middleware;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/filters.js":"'use strict';\n\nexports.json = function (input) {\n  return JSON.stringify(input, null, '    ');\n};\n\nexports.convertBytes = function (input) {\n  input = parseInt(input, 10);\n  if (input < 1024) {\n    return input.toString() + ' Bytes';\n  } else if (input < 1024 * 1024) {\n    //Convert to KB and keep 2 decimal values\n    input = Math.round((input / 1024) * 100) / 100;\n    return input.toString() + ' KB';\n  } else if (input < 1024 * 1024 * 1024) {\n    input = Math.round((input / (1024 * 1024)) * 100) / 100;\n    return input.toString() + ' MB';\n  } else if (input < 1024 * 1024 * 1024 * 1024) {\n    input = Math.round((input / (1024 * 1024 * 1024)) * 100) / 100;\n    return input.toString() + ' GB';\n  } else if (input < 1024 * 1024 * 1024 * 1024 * 1024) {\n    input = Math.round((input / (1024 * 1024 * 1024 * 1024)) * 100) / 100;\n    return input.toString() + ' TB';\n  } else {\n    return input.toString() + ' Bytes';\n  }\n};\n\nexports.to_string = function (input) {\n  return (input !== null && input !== undefined) ? input.toString() : '';\n};\n\nexports.to_display = function (input) {\n\n  var entifyGTLTAmp = function (text) {\n    // Turn < ? > into HTML entities, so data doesn't get interpreted by the browser\n    return text.replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  };\n\n  var retHTML = '';\n\n  // Get nulls out of the way\n  if (input === null || input === undefined) {\n    return '';\n  }\n\n  // Large property\n  if (\n    typeof input === 'object' &&\n    input.display &&\n    input.display === '*** LARGE PROPERTY ***' &&\n    input.preview &&\n    input.roughSz &&\n    input.humanSz &&\n    input.attribu &&\n    input.maxSize &&\n    input._id\n  ) {\n    retHTML += '<div class=\"tooDamnBig\" doc_id=\"' + encodeURIComponent(JSON.stringify(input._id)) + '\" ' +\n      'doc_prop=\"' + input.attribu + '\" title=\"Max prop size: ' + input.maxSize + '\">';\n    retHTML += input.display + '<br>~' + input.humanSz;\n    retHTML += '<br>Preview:' + input.preview;\n    retHTML += '<br>Click to fetch this property';\n    retHTML += '</div>';\n    return retHTML;\n  }\n\n  // Large row\n  if (\n    typeof input === 'object' &&\n    input.display &&\n    input.display === '*** LARGE ROW ***' &&\n    input.preview &&\n    input.roughSz &&\n    input.humanSz &&\n    input.attribu &&\n    input.maxSize &&\n    input._id\n  ) {\n    retHTML += '<div class=\"tooDamnBig\" doc_id=\"' + encodeURIComponent(JSON.stringify(input._id)) + '\" ' +\n      'doc_prop=\"' + input.attribu + '\" title=\"Max row size: ' + input.maxSize + '\">';\n    retHTML += input.display + '<br>' + input.attribu + ': ~' + input.humanSz;\n    retHTML += '<br>Preview:' + input.preview;\n    retHTML += '<br>Click to fetch this property';\n    retHTML += '</div>';\n    return retHTML;\n  }\n\n  // Images inline\n  if (\n    typeof input === 'string' &&\n    (\n      input.substr(0, 22) === 'data:image/png;base64,' ||\n      input.substr(0, 22) === 'data:image/gif;base64,' ||\n      input.substr(0, 22) === 'data:image/jpg;base64,' ||\n      input.substr(0, 23) === 'data:image/jpeg;base64,'\n    )\n  )  {\n    return '<img src=\"' + input + '\" style=\"max-height:100%; max-width:100%; \"/>';\n  }\n\n  // Audio inline\n  if (\n    typeof input === 'string' &&\n    (\n      input.substr(0, 22) === 'data:audio/ogg;base64,' ||\n      input.substr(0, 22) === 'data:audio/mp3;base64,'\n    )\n  )  {\n    return '<audio controls style=\"width:45px;\" src=\"' + input + '\">Your browser does not support the audio element.</audio>';\n  }\n\n  // Video inline\n  if (\n    typeof input === 'string' &&\n    (\n      input.substr(0, 23) === 'data:video/webm;base64,' ||\n      input.substr(0, 22) === 'data:video/mp4;base64,'  ||\n      input.substr(0, 22) === 'data:video/ogv;base64,'\n    )\n  )  {\n    return '<video controls><source type=\"' + input.substring(input.indexOf(':') + 1, input.indexOf(';')) + '\" src=\"' + input + '\"/>' +\n      'Your browser does not support the video element.</video>';\n  }\n\n  if (typeof input === 'object' && input.toString().substr(0, 15) === '[object Object]') {\n    return '<pre>' + JSON.stringify(input, null, 2) + '</pre>';\n  }\n\n  // Concatenate long strings\n  if (typeof input === 'string' && input.length > 50) {\n    return entifyGTLTAmp(input.substr(0, 49) + '…');\n  }\n\n  // Return basic .toString() since we've tried all other cases\n  return entifyGTLTAmp(input.toString());\n};\n\nexports.stringDocIDs = function (input) {\n\n  // Turns {_bsontype: ' ObjectID', id:12345... } into a plain string\n  if (input && typeof input === 'object' && input._bsontype === 'ObjectID') {\n    return input.toString();\n  }\n\n  return input;\n};\n\nexports.is_embeddedDocumentNotation = function (input) {\n  return /^(?:[a-zA-Z0-9_]+\\.)+[a-zA-Z0-9_]+/.test(input);\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/router.js":"'use strict';\n\nconst _ = require('lodash');\nconst basicAuth = require('basic-auth-connect');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst db = require('./db');\nconst errorHandler = require('errorhandler');\nconst express = require('express');\nconst favicon = require('serve-favicon');\nconst logger = require('morgan');\nconst methodOverride = require('method-override');\nconst mongodb = require('mongodb');\nconst routes = require('./routes');\nconst session = require('express-session');\nconst utils = require('./utils');\n\nconst router = function (config) {\n  // appRouter configuration\n  const appRouter = express.Router();\n  const mongo = db(config);\n\n  if (config.useBasicAuth) {\n    appRouter.use(basicAuth(config.basicAuth.username, config.basicAuth.password));\n  }\n\n  appRouter.use(favicon(__dirname + '/../public/images/favicon.ico'));\n\n  appRouter.use(logger('dev', config.options.logger));\n\n  appRouter.use('/public', express.static(__dirname + '/../build/'));\n\n  // Set request size limit\n  appRouter.use(bodyParser.urlencoded({\n    extended: true,\n    limit: config.site.requestSizeLimit,\n  }));\n\n  appRouter.use(cookieParser(config.site.cookieSecret));\n\n  appRouter.use(session({\n    key: config.site.cookieKeyName,\n    resave: true,\n    saveUninitialized: true,\n    secret: config.site.sessionSecret,\n  }));\n\n  appRouter.use(methodOverride(function (req) {\n    if (req.body && typeof req.body === 'object' && '_method' in req.body) {\n      // look in urlencoded POST bodies and delete it\n      const method = req.body._method;\n      delete req.body._method;\n      return method;\n    }\n  }));\n\n  if (process.env.NODE_ENV === 'development') {\n    appRouter.use(errorHandler());\n  }\n\n  const addTrailingSlash = function (s) {\n    return s + (s[s.length - 1] === '/' ? '' : '/');\n  };\n  const buildBaseHref = function (originalUrl, reqUrl) {\n    if (reqUrl === '/') {\n      return addTrailingSlash(originalUrl);\n    }\n    const idx = originalUrl.lastIndexOf(reqUrl);\n    const rootPath = originalUrl.substring(0, idx);\n    return addTrailingSlash(rootPath);\n  };\n\n  // View helper, sets local variables used in templates\n  appRouter.all('*', function (req, res, next) {\n    res.locals.baseHref       = buildBaseHref(req.originalUrl, req.url);\n    res.locals.databases      = mongo.databases;\n    res.locals.collections    = mongo.collections;\n    res.locals.gridFSBuckets  = utils.colsToGrid(mongo.collections);\n\n    // Flash messages\n    if (req.session.success) {\n      res.locals.messageSuccess = req.session.success;\n      delete req.session.success;\n    }\n\n    if (req.session.error) {\n      res.locals.messageError = req.session.error;\n      delete req.session.error;\n    }\n\n    if (config.mongodb.admin !== true) return next();\n\n    mongo.updateDatabases(mongo.adminDb, function (databases) {\n      mongo.databases = databases;\n      res.locals.databases = mongo.databases;\n      return next();\n    });\n  });\n\n  // route param pre-conditions\n  appRouter.param('database', function (req, res, next, id) {\n    //Make sure database exists\n    if (!_.includes(mongo.databases, id)) {\n      req.session.error = 'Database not found!';\n      return res.redirect(res.locals.baseHref);\n    }\n\n    req.dbName = id;\n    res.locals.dbName = id;\n\n    if (mongo.connections[id] !== undefined) {\n      req.db = mongo.connections[id];\n    } else {\n      mongo.connections[id] = mongo.mainConn.db(id);\n      req.db = mongo.connections[id];\n    }\n\n    next();\n  });\n\n  // :collection param MUST be preceded by a :database param\n  appRouter.param('collection', function (req, res, next, id) {\n    //Make sure collection exists\n\n    if (!_.includes(mongo.collections[req.dbName], id)) {\n      req.session.error = 'Collection not found!';\n      return res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n    }\n\n    req.collectionName = id;\n    res.locals.collectionName = id;\n    res.locals.collections = mongo.collections[req.dbName];\n    res.locals.gridFSBuckets = utils.colsToGrid(mongo.collections[req.dbName]);\n\n    mongo.connections[req.dbName].collection(id, function (err, coll) {\n      if (err || coll === null) {\n        req.session.error = 'Collection not found!';\n        return res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n      }\n\n      req.collection = coll;\n\n      next();\n    });\n  });\n\n  // :document param MUST be preceded by a :collection param\n  appRouter.param('document', function (req, res, next, id) {\n    if (id === 'undefined' || id === undefined) {\n      req.session.error = 'Document lacks an _id!';\n      return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n    }\n\n    id = JSON.parse(decodeURIComponent(id));\n    let obj_id;\n\n    // Attempt to create ObjectID from passed 'id'\n    try {\n      obj_id = new mongodb.ObjectID.createFromHexString(id);\n    } catch (err) {\n      // Silence the error\n    }\n\n    // If an ObjectID was correctly created from passed id param, try getting the ObjID first else falling back to try getting the string id\n    // If not valid ObjectID created, try getting string id\n\n    if (obj_id) {\n      // passed id has successfully been turned into a valid ObjectID\n      req.collection.findOne({ _id: obj_id }, function (err, doc) {\n        if (err) {\n          req.session.error = 'Error: ' + err;\n          return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n        }\n\n        if (doc === null) {\n          // No document found with obj_id, try again with straight id\n          req.collection.findOne({ _id: id }, function (err, doc) {\n            if (err) {\n              req.session.error = 'Error: ' + err;\n              return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n            }\n\n            if (doc === null) {\n              req.session.error = 'Document not found!';\n              return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n            }\n\n            // Document found - send it back\n            req.document = doc;\n            res.locals.document = doc;\n\n            next();\n          });\n        } else {\n          // Document found - send it back\n          req.document = doc;\n          res.locals.document = doc;\n\n          next();\n        }\n\n      });\n    } else {\n      // Passed id was NOT a valid ObjectID\n      req.collection.findOne({ _id: id }, function (err, doc) {\n        if (err) {\n          req.session.error = 'Error: ' + err;\n          return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n        }\n\n        if (doc === null) {\n          req.session.error = 'Document not found!';\n          return res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n        }\n\n        req.document = doc;\n        res.locals.document = doc;\n\n        next();\n      });\n    }\n  });\n\n  // get individual property - for async loading of big documents\n  // (db)/(collection)/(document)/(prop)\n  appRouter.param('prop', function (req, res, next, prop) {\n    req.prop = req.document[prop];\n    next();\n  });\n\n  // GridFS (db)/gridFS/(bucket)\n  appRouter.param('bucket', function (req, res, next, id) {\n\n    req.bucketName = id;\n    res.locals.bucketName = id;\n\n    mongo.connections[req.dbName].collection(id + '.files', function (err, filesConn) {\n      if (err || filesConn === null) {\n        req.session.error = id + '.files collection not found! Err:' + err;\n        return res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n      }\n\n      req.filesConn = filesConn;\n\n      filesConn.find({}).toArray(function (err, files) {\n        if (err || files === null) {\n          req.session.error = id + '.files collection not found! Error:' + err;\n          return res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n        }\n\n        req.files = files;\n\n        next();\n      });\n    });\n  });\n\n  // GridFS files\n  appRouter.param('file', function (req, res, next, id) {\n    req.fileID = JSON.parse(decodeURIComponent(id));\n    next();\n  });\n\n  // mongodb mongoMiddleware\n  const mongoMiddleware = function (req, res, next) {\n    req.mainConn = mongo.mainConn;\n    req.adminDb = mongo.adminDb;\n    req.databases = mongo.databases; //List of database names\n    req.collections = mongo.collections; //List of collection names in all databases\n    req.gridFSBuckets = utils.colsToGrid(mongo.collections);\n\n    //Allow page handlers to request an update for collection list\n    req.updateCollections = mongo.updateCollections;\n\n    next();\n  };\n\n  // routes\n  const configuredRoutes = routes(config);\n\n  appRouter.get('/', mongoMiddleware, configuredRoutes.index);\n  appRouter.post('/', mongoMiddleware, configuredRoutes.addDatabase);\n  appRouter.delete('/:database', mongoMiddleware, configuredRoutes.deleteDatabase);\n  appRouter.get('/db/:database', mongoMiddleware, configuredRoutes.viewDatabase);\n\n  appRouter.post('/checkValid', mongoMiddleware, configuredRoutes.checkValid);\n\n  // Collection level routes\n  appRouter.get('/db/:database/compact/:collection', mongoMiddleware, configuredRoutes.compactCollection);\n  appRouter.get('/db/:database/expArr/:collection', mongoMiddleware, configuredRoutes.exportColArray);\n  appRouter.get('/db/:database/expCsv/:collection', mongoMiddleware, configuredRoutes.exportCsv);\n  appRouter.get('/db/:database/reIndex/:collection', mongoMiddleware, configuredRoutes.reIndex);\n  appRouter.post('/db/:database/addIndex/:collection', mongoMiddleware, configuredRoutes.addIndex);\n  appRouter.get('/db/:database/export/:collection', mongoMiddleware, configuredRoutes.exportCollection);\n  appRouter.get('/db/:database/dropIndex/:collection', mongoMiddleware, configuredRoutes.dropIndex);\n  appRouter.get('/db/:database/updateCollections', mongoMiddleware, configuredRoutes.updateCollections);\n\n  // GridFS\n  appRouter.post('/db/:database/gridFS', mongoMiddleware, configuredRoutes.addBucket);\n  appRouter.delete('/db/:database/gridFS/:bucket', mongoMiddleware, configuredRoutes.deleteBucket);\n\n  appRouter.get('/db/:database/gridFS/:bucket', mongoMiddleware, configuredRoutes.viewBucket);\n  appRouter.post('/db/:database/gridFS/:bucket', mongoMiddleware, configuredRoutes.addFile);\n  appRouter.get('/db/:database/gridFS/:bucket/:file', mongoMiddleware, configuredRoutes.getFile);\n  appRouter.delete('/db/:database/gridFS/:bucket/:file', mongoMiddleware, configuredRoutes.deleteFile);\n\n  appRouter.get('/db/:database/:collection', mongoMiddleware, configuredRoutes.viewCollection);\n  appRouter.put('/db/:database/:collection', mongoMiddleware, configuredRoutes.renameCollection);\n  appRouter.delete('/db/:database/:collection', mongoMiddleware, configuredRoutes.deleteCollection);\n  appRouter.post('/db/:database', mongoMiddleware, configuredRoutes.addCollection);\n\n  // Document routes\n  appRouter.post('/db/:database/:collection', mongoMiddleware, configuredRoutes.addDocument);\n  appRouter.get('/db/:database/:collection/:document', mongoMiddleware, configuredRoutes.viewDocument);\n  appRouter.put('/db/:database/:collection/:document', mongoMiddleware, configuredRoutes.updateDocument);\n  appRouter.delete('/db/:database/:collection/:document', mongoMiddleware, configuredRoutes.deleteDocument);\n\n  // Property routes\n  appRouter.get('/db/:database/:collection/:document/:prop', mongoMiddleware, configuredRoutes.getProperty);\n\n  return appRouter;\n};\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/db.js":"'use strict';\n\nconst _ = require('lodash');\nconst async = require('async');\nconst mongodb = require('mongodb');\n\nlet connect = function (config) {\n  // set up database stuff\n  let host = config.mongodb.server  || 'localhost';\n  let port = config.mongodb.port    || mongodb.Connection.DEFAULT_PORT;\n\n  if (config.mongodb.useSSL) {\n    console.error('Please update config file to use mongodb.ssl instead of mongodb.useSSL. Copying value for now.');\n    config.mongodb.ssl = config.mongodb.useSSL;\n  }\n\n  let dbOptions = {\n    auto_reconnect: config.mongodb.autoReconnect,\n    poolSize:       config.mongodb.poolSize,\n    ssl:            config.mongodb.ssl,\n    sslValidate:    config.mongodb.sslValidate,\n    sslCA:          config.mongodb.sslCA,\n  };\n\n  let db;\n\n  if (Array.isArray(host)) {\n    host = host.map(function (host) {\n      return new mongodb.Server(host, port, dbOptions);\n    });\n\n    db = new mongodb.Db('local', new mongodb.ReplSet(host), { safe: true, w: 0 });\n  } else {\n    db = new mongodb.Db('local', new mongodb.Server(host, port, dbOptions), { safe: true });\n  }\n\n  let collections     = {};\n  let connections     = {};\n  let databases       = [];\n\n  let adminDb = db.admin();\n  let mainConn  = db; // main db connection\n\n  // update the collections list\n  let updateCollections = function (db, dbName, callback) {\n    db.listCollections().toArray(function (err, result) {\n      let names = [];\n\n      for (let r in result) {\n        names.push(result[r].name);\n      }\n\n      collections[dbName] = names.sort();\n\n      if (callback) {\n        callback(err);\n      }\n    });\n  };\n\n  // update database list\n  let updateDatabases = function (admin, callback) {\n\n    admin.listDatabases(function (err, dbs) {\n      databases = [];\n      if (err) {\n        //TODO: handle error\n        console.error(err);\n        databases = _.map(config.mongodb.auth, 'database');\n      } else {\n        for (let i = 0; i < dbs.databases.length; i++) {\n          let dbName = dbs.databases[i].name;\n\n          if (config.mongodb.whitelist.length !== 0) {\n            if (!_.includes(config.mongodb.whitelist, dbName)) {\n              continue;\n            }\n          }\n\n          if (config.mongodb.blacklist.length !== 0) {\n            if (_.includes(config.mongodb.blacklist, dbName)) {\n              continue;\n            }\n          }\n\n          connections[dbName] = mainConn.db(dbName);\n          databases.push(dbName);\n          updateCollections(connections[dbName], dbName);\n        }\n      }\n\n      //Sort database names\n      databases = databases.sort();\n\n      if (callback) {\n        callback(databases);\n      }\n    });\n  };\n\n  // connect to mongodb database\n  db.open(function (err, db) {\n    if (err) {\n      throw err;\n    }\n\n    if (config.options.console) console.log('Database connected');\n\n    mainConn = db;\n\n    //Check if admin features are on\n    if (config.mongodb.admin === true) {\n\n      if (config.mongodb.adminUsername.length === 0) {\n        if (config.options.console) console.log('Admin Database connected');\n        updateDatabases(adminDb);\n      } else {\n        //auth details were supplied, authenticate admin account with them\n        adminDb.authenticate(config.mongodb.adminUsername, config.mongodb.adminPassword, function (err) {\n          if (err) {\n            //TODO: handle error\n            console.error(err);\n          }\n\n          if (config.options.console) console.log('Admin Database connected');\n          updateDatabases(adminDb);\n        });\n      }\n    } else {\n      //Regular user authentication\n      if (typeof config.mongodb.auth === 'undefined' || config.mongodb.auth.length === 0) {\n        throw new Error('Add auth details to config or turn on admin!');\n      }\n\n      async.forEachSeries(config.mongodb.auth, function (auth, callback) {\n        if (config.options.console) console.log('Connecting to ' + auth.database + '...');\n        connections[auth.database] = mainConn.db(auth.database);\n        databases.push(auth.database);\n\n        if (typeof auth.username !== 'undefined' && auth.username.length !== 0) {\n          connections[auth.database].authenticate(auth.username, auth.password, function (err, success) {\n            if (err) {\n              //TODO: handle error\n              console.error(err);\n            }\n\n            if (!success) {\n              console.error('Could not authenticate to database \"' + auth.database + '\"');\n            }\n\n            updateCollections(connections[auth.database], auth.database);\n            if (config.options.console) console.log('Database ' + auth.database + ' connected');\n            callback();\n          });\n        } else {\n          updateCollections(connections[auth.database], auth.database);\n          if (config.options.console) console.log('Database ' + auth.database + ' connected');\n          callback();\n        }\n      });\n    }\n  });\n\n  return {\n    adminDb:            adminDb,\n    collections:        collections,\n    connections:        connections,\n    databases:          databases,\n    mainConn:           mainConn,\n    updateCollections:  updateCollections,\n    updateDatabases:    updateDatabases,\n  };\n};\n\nmodule.exports = connect;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/routes/index.js":"'use strict';\n\n// Add routes from other files\nconst collectionRoute = require('./collection');\nconst databaseRoute = require('./database');\nconst documentRoute = require('./document');\nconst gridFSRoute = require('./gridfs');\n\nmodule.exports = function (config) {\n  const exp = {};\n\n  const configuredDatabaseRoutes = databaseRoute(config);\n  const configuredCollectionRoutes = collectionRoute(config);\n  const configuredDocumentRoutes = documentRoute(config);\n  const configuredGridFSRoute = gridFSRoute(config);\n\n  exp.addDatabase = configuredDatabaseRoutes.addDatabase;\n  exp.deleteDatabase = configuredDatabaseRoutes.deleteDatabase;\n  exp.viewDatabase = configuredDatabaseRoutes.viewDatabase;\n\n  exp.addCollection = configuredCollectionRoutes.addCollection;\n  exp.compactCollection = configuredCollectionRoutes.compactCollection;\n  exp.deleteCollection = configuredCollectionRoutes.deleteCollection;\n  exp.exportColArray = configuredCollectionRoutes.exportColArray;\n  exp.exportCsv = configuredCollectionRoutes.exportCsv;\n  exp.exportCollection = configuredCollectionRoutes.exportCollection;\n  exp.renameCollection = configuredCollectionRoutes.renameCollection;\n  exp.updateCollections = configuredCollectionRoutes.updateCollections;\n  exp.viewCollection = configuredCollectionRoutes.viewCollection;\n  exp.dropIndex = configuredCollectionRoutes.dropIndex;\n  exp.reIndex = configuredCollectionRoutes.reIndex;\n  exp.addIndex = configuredCollectionRoutes.addIndex;\n\n  exp.getProperty = configuredDocumentRoutes.getProperty;\n  exp.addDocument = configuredDocumentRoutes.addDocument;\n  exp.checkValid = configuredDocumentRoutes.checkValid;\n  exp.deleteDocument = configuredDocumentRoutes.deleteDocument;\n  exp.updateDocument = configuredDocumentRoutes.updateDocument;\n  exp.viewDocument = configuredDocumentRoutes.viewDocument;\n\n  exp.addBucket = configuredGridFSRoute.addBucket;\n  exp.deleteBucket = configuredGridFSRoute.deleteBucket;\n  exp.viewBucket = configuredGridFSRoute.viewBucket;\n  exp.addFile = configuredGridFSRoute.addFile;\n  exp.getFile = configuredGridFSRoute.getFile;\n  exp.deleteFile = configuredGridFSRoute.deleteFile;\n\n  // Homepage route\n  exp.index = function (req, res) {\n    const ctx = {\n      title: 'Mongo Express',\n      info: false,\n    };\n\n    if (typeof req.adminDb === 'undefined') {\n      return res.render('index');\n    }\n\n    req.adminDb.serverStatus((err, info) => {\n      if (err) {\n        // TODO: handle error\n        console.error(err);\n      }\n\n      ctx.info = info;\n      res.render('index', ctx);\n    });\n  };\n\n  return exp;\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/routes/collection.js":"'use strict';\n\nvar _     = require('lodash');\nvar bson  = require('../bson');\nvar os    = require('os');\nvar utils = require('../utils');\nvar csv   = require('../csv');\n\nconst buildCollectionURL = utils.buildCollectionURL;\n\nvar routes = function (config) {\n  var exp = {};\n\n  function validateCollectionName(name) {\n    if (name === undefined || name.length === 0) {\n      return { error: true, message: 'You forgot to enter a collection name!' };\n    }\n\n    // Collection names must begin with a letter, underscore or slash, (tested v3.2.4)\n    // and can contain only letters, underscores, numbers, dots or slashes\n    if (!name.match(/^[a-zA-Z_/][a-zA-Z0-9._/]*$/)) {\n      return { error: true, message: 'That collection name is invalid.' };\n    }\n    return { error: false };\n  }\n\n  /*\n   * Builds the Mongo query corresponding to the\n   * Simple/Advanced parameters input.\n   * Returns null if no query parameters were passed in request.\n   */\n  exp._buildMongoQuery = function (req) {\n    var result = null;\n    var key = req.query.key;\n    var value = req.query.value;\n    var type = req.query.type && req.query.type.toUpperCase();\n    var jsonQuery = req.query.query;\n\n    if (key && value) {\n      // if it is a simple query,\n\n      // 1. fist convert value to its actual type\n      var converters = {\n        // If type == J, convert value as json document\n        J: function (value) {\n          return JSON.parse(value);\n        },\n        // If type == N, convert value to number\n        N: function (value) {\n          return Number(value);\n        },\n        // If type == O, convert value to ObjectID\n        O: function (value) {\n          // Hex input\n          var result = bson.hexToObjectId(value);\n\n          if (!result) {\n            // Basic validation\n            // Check we have ObjectID() wrapper\n            if (\n              value.toUpperCase().indexOf('OBJECTID(') === -1 ||   // missing the opening 'ObjectID('\n              value.indexOf(')') === -1                            // missing the closing '('\n            ) {\n              throw new Error('ObjectID(...) wrapper must be present');\n              // req.session.error = 'ObjectID(...) wrapper must be present';\n              // return res.redirect('back');\n            }\n\n            result = bson.toObjectId(value);\n            if (!value) {\n              throw new Error('ObjectID is invalid');\n            }\n          }\n          return result;\n        },\n        // If type == R, convert to RegExp\n        R: function (value) {\n          return new RegExp(value, 'i');\n        },\n        // if type == S, no conversion done\n        S: function (value) {\n          return value;\n        },\n      };\n      if (!converters[type]) {\n        throw new Error('Invalid query type: ' + type);\n      }\n      value = converters[type](value);\n\n      // 2. then set query to it\n      result = {};\n      result[key] = value;\n    } else if (jsonQuery) {\n      // if it is a complex query, take it as is;\n      result = bson.toSafeBSON(jsonQuery);\n      if (result === null) {\n        throw new Error('Query entered is not valid');\n      }\n    }\n    // otherwise leave as null;\n    return result;\n  };\n\n  //view all entries in a collection\n  exp.viewCollection = function (req, res) {\n\n    req.query = req.query || {}; // might not be present in Express5\n\n    var limit = config.options.documentsPerPage;\n    var skip = parseInt(req.query.skip, 10) || 0;\n    var sort = req.query.sort || {};\n\n    for (var i in sort) {\n      sort[i] = parseInt(sort[i], 10);\n    }\n\n    var query_options = {\n      sort:   sort,\n      limit:  limit,\n      skip:   skip,\n    };\n\n    var query;\n    try {\n      // if no criteria were passed, return whole list\n      query = exp._buildMongoQuery(req, res) || {};\n    } catch (err) {\n      req.session.error = err.message;\n      return res.redirect('back');\n    }\n\n    var projection      = {};\n    var jsonProjection  = req.query.projection  || '';\n    if (jsonProjection) {\n      projection = bson.toSafeBSON(jsonProjection) || {};\n    }\n\n    // determine default key\n    var dbName          = req.params.database;\n    var collectionName  = req.params.collection;\n    var defaultKey = (config.defaultKeyNames && config.defaultKeyNames[dbName] && config.defaultKeyNames[dbName][collectionName]) ?\n      config.defaultKeyNames[dbName][collectionName] :\n      '_id';\n    var edKey = function (doc, defaultKey) {\n      var defaultKeyAsArray = defaultKey.split('.');\n      var val = doc;\n      for (var i = 0; i < defaultKeyAsArray.length; i++) {\n        if (val[defaultKeyAsArray[i]]) {\n          val = val[defaultKeyAsArray[i]];\n        }\n      }\n      return val;\n    };\n\n    req.collection.find(query, projection, query_options).toArray(function (err, items) {\n      req.collection.stats(function (err, stats) {\n        req.collection.indexes(function (err, indexes) {\n          req.collection.count(query, null, function (err, count) {\n            //Pagination\n            //Have to do this here, swig template doesn't allow any calculations :(\n            var prev;\n            var prev2;\n            var here;\n            var next2;\n            var next;\n            var last;\n            var pagination;\n\n            prev = {\n              page: Math.round((skip - limit) / limit) + 1,\n              skip: skip - limit,\n            };\n            prev2 = {\n              page: Math.round((skip - limit * 2) / limit) + 1,\n              skip: skip - limit * 2,\n            };\n            next2 = {\n              page: Math.round((skip + limit * 2) / limit) + 1,\n              skip: skip + limit * 2,\n            };\n            next = {\n              page: Math.round((skip + limit) / limit) + 1,\n              skip: skip + limit,\n            };\n            here = Math.round(skip / limit) + 1;\n            last = (Math.ceil(count / limit) - 1) * limit;\n            pagination = count > limit;\n\n            var docs    = [];\n            var columns = [];\n\n            for (var i in items) {\n\n              // Prep items with stubs so as not to send large info down the wire\n              for (let prop in items[i]) {\n                if (utils.roughSizeOfObject(items[i][prop]) > config.options.maxPropSize) {\n                  items[i][prop] = {\n                    attribu: prop,\n                    display: '*** LARGE PROPERTY ***',\n                    humanSz: utils.bytesToSize(utils.roughSizeOfObject(items[i][prop])),\n                    maxSize: utils.bytesToSize(config.options.maxPropSize),\n                    preview: JSON.stringify(items[i][prop]).substr(0, 25),\n                    roughSz: utils.roughSizeOfObject(items[i][prop]),\n                    _id: items[i]._id,\n                  };\n                }\n              }\n\n              // If after prepping the row is still too big\n              if (utils.roughSizeOfObject(items[i]) > config.options.maxRowSize) {\n                for (let prop in items[i]) {\n                  if (prop !== '_id' && utils.roughSizeOfObject(items[i][prop]) > 200) {\n                    items[i][prop] = {\n                      attribu: prop,\n                      display: '*** LARGE ROW ***',\n                      humanSz: utils.bytesToSize(utils.roughSizeOfObject(items[i][prop])),\n                      maxSize: utils.bytesToSize(config.options.maxRowSize),\n                      preview: JSON.stringify(items[i][prop]).substr(0, 25),\n                      roughSz: utils.roughSizeOfObject(items[i][prop]),\n                      _id: items[i]._id,\n                    };\n                  }\n                }\n              }\n\n              docs[i] = items[i];\n              columns.push(Object.keys(items[i]));\n              items[i] = bson.toString(items[i]);\n            }\n\n            var indexSizes = stats.indexSizes;\n            for (var n = 0, nn = indexes.length; n < nn; n++) {\n              indexes[n].size = indexSizes[indexes[n].name];\n            }\n\n\n            // Generate an array of columns used by all documents visible on this page\n            columns = _.uniq(_.flatten(columns));\n\n            var ctx = {\n              title: 'Viewing Collection: ' + req.collectionName,\n              documents: items, // Docs converted to strings\n              docs: docs,       // Original docs\n              columns: columns, // All used columns\n              count: count, // total number of docs returned by the query\n              stats: stats,\n              editorTheme: config.options.editorTheme,\n              limit: limit,\n              skip: skip,\n              sort: sort,\n              prev: prev,\n              prev2: prev2,\n              next2: next2,\n              next: next,\n              here: here,\n              last: last,\n              pagination: pagination,\n              key: req.query.key,\n              value: req.query.value,\n              // value: type === 'O' ? ['ObjectID(\"', value, '\")'].join('') : value,\n              type: req.query.type,\n              query: req.query.query,\n              projection: jsonProjection,\n              defaultKey: defaultKey,\n              edKey: edKey,\n              collapsibleJSON: config.options.collapsibleJSON,\n              collapsibleJSONDefaultUnfold: config.options.collapsibleJSONDefaultUnfold,\n              indexes: indexes,\n            };\n\n            res.render('collection', ctx);\n          });\n        });\n      });\n    });\n  };\n\n  exp.compactCollection = function (req, res) {\n    req.db.command({ compact: req.collectionName }, function (err) {\n      if (err) {\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Collection compacted!';\n      return res.redirect('back');\n    });\n  };\n\n  exp.exportCollection = function (req, res) {\n    req.collection.find().toArray(function (err, items) {\n      res.setHeader('Content-disposition', 'attachment; filename=' + req.collectionName + '.json');\n      res.setHeader('Content-type', 'application/json');\n      var aItems = [];\n      for (var i in items) {\n        var docStr = bson.toJsonString(items[i]);\n        aItems.push(docStr);\n      }\n\n      res.write(aItems.join(os.EOL));\n      res.end();\n    });\n  };\n\n  exp.exportColArray = function (req, res) {\n    req.collection.find().toArray(function (err, items) {\n      res.setHeader('Content-disposition', 'attachment; filename=' + req.collectionName + '.json');\n      res.setHeader('Content-type', 'application/json');\n      res.write(bson.toJsonString(items));\n      res.end();\n    });\n  };\n\n  exp.exportCsv = function (req, res) {\n    req.collection.find().toArray(function (err, items) {\n      res.setHeader('Content-disposition', 'attachment; filename=' + req.collectionName + '.csv');\n      res.setHeader('Content-type', 'application/json');\n      res.write(csv(items));\n      res.end();\n    });\n  };\n\n  exp.reIndex = function (req, res) {\n    req.collection.reIndex(function (err) {\n      if (err) {\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Index regenerated!';\n      return res.redirect('back');\n    });\n  };\n\n  exp.addIndex = function (req, res) {\n    var doc = req.body.index;\n\n    if (doc === undefined || doc.length === 0) {\n      req.session.error = 'You forgot to enter a index!';\n      return res.redirect('back');\n    }\n\n    var docBSON;\n\n    try {\n      docBSON = bson.toBSON(doc);\n    } catch (err) {\n      req.session.error = 'JSON is not valid!';\n      console.error(err);\n      return res.redirect('back');\n    }\n\n    req.collection.createIndex(docBSON, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Index created!';\n      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));\n    });\n  };\n\n  exp.addCollection = function (req, res) {\n    var name = req.body.collection;\n\n    const validation = validateCollectionName(name);\n    if (validation.error) {\n      req.session.error = validation.message;\n      return res.redirect('back');\n    }\n\n    req.db.createCollection(name, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.updateCollections(req.db, req.dbName, function () {\n        req.session.success = 'Collection created!';\n        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));\n      });\n    });\n  };\n\n  exp.deleteCollection = function (req, res) {\n    if (config.options.readOnly === true) {\n      req.session.error = 'Error: config.options.readOnly is set to true';\n      return res.redirect('back');\n    }\n    var query = exp._buildMongoQuery(req);\n    if (query) {\n      // we're just deleting some of the documents\n      var deleteOptions = null;\n      req.collection.deleteMany(query, deleteOptions, function (err, opRes) {\n        if (err) {\n          req.session.error = 'Something went wrong: ' + err;\n          console.error(err);\n          return res.redirect('back');\n        }\n        req.session.success = opRes.result.n + ' documents deleted from \"' + req.collectionName + '\"';\n        res.redirect(res.locals.baseHref + 'db/' + req.dbName + '/' + req.collectionName);\n      });\n    } else {\n      // no query means we're dropping the whole collection\n      req.collection.drop(function (err) {\n        if (err) {\n          req.session.error = 'Something went wrong: ' + err;\n          console.error(err);\n          return res.redirect('back');\n        }\n        req.updateCollections(req.db, req.dbName, function (err) {\n          if (err) {\n            req.session.error = 'Something went wrong: ' + err;\n            console.error(err);\n            return res.redirect('back');\n          }\n          req.session.success = 'Collection  \"' + req.collectionName + '\" deleted!';\n          res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n        });\n      });\n    }\n  };\n\n  exp.renameCollection = function (req, res) {\n    var name = req.body.collection;\n\n    const validation = validateCollectionName(name);\n    if (validation.error) {\n      req.session.error = validation.message;\n      return res.redirect('back');\n    }\n\n    req.collection.rename(name, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.updateCollections(req.db, req.dbName, function (err) {\n        if (err) {\n          req.session.error = 'Something went wrong: ' + err;\n          return res.redirect('back');\n        }\n\n        req.session.success = 'Collection renamed!';\n        res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, name));\n      });\n    });\n  };\n\n  exp.updateCollections = function (req, res) {\n    req.updateCollections(req.db, req.dbName, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Collections Updated!';\n      res.redirect(res.locals.baseHref + 'db/' + req.dbName);\n    });\n  };\n\n  exp.dropIndex = function (req, res) {\n    if (!req.query.name) {\n      req.session.error = 'Error: missing name parameter';\n      return res.redirect('back');\n    }\n    if (config.options.readOnly === true) {\n      req.session.error = 'Error: config.options.readOnly is set to true';\n      return res.redirect('back');\n    }\n    req.collection.dropIndex(req.query.name, function (err) {\n      if (err) {\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Index deleted!';\n      return res.redirect('back');\n    });\n  };\n\n  return exp;\n};\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/bson.js":"'use strict';\n\nvar mongodb = require('mongodb');\nvar vm      = require('vm');\nvar json    = require('./json');\n\n//Adaptors for BSON types\n\nvar DBRef = function (namespace, oid, db) {\n  //Allow empty/undefined db value\n  if (db === undefined || db === null) {\n    db = '';\n  }\n\n  var objectId = exports.toObjectId(oid);\n  if (objectId === false) {\n    objectId = mongodb.ObjectId(oid);\n  }\n  return mongodb.DBRef(namespace, objectId, db);\n};\n\nvar Timestamp = function (high, low) {\n  //Switch low/high bits to Timestamp constructor\n  return mongodb.Timestamp(low, high);\n};\n\n//Create sandbox with BSON data types\nexports.getSandbox = function () {\n  return {\n    Long: mongodb.Long,\n    NumberLong: mongodb.Long,\n    Double: mongodb.Double,\n    NumberDouble: mongodb.Double,\n    ObjectId: mongodb.ObjectID,\n    ObjectID: mongodb.ObjectID,\n    Timestamp: Timestamp,\n    DBRef: DBRef,\n    Dbref: DBRef,\n    Binary: mongodb.Binary,\n    BinData: mongodb.Binary,\n    Code: mongodb.Code,\n    Symbol: mongodb.Symbol,\n    MinKey: mongodb.MinKey,\n    MaxKey: mongodb.MaxKey,\n    ISODate: Date,\n    Date: Date,\n    Buffer: Buffer,\n  };\n};\n\n//JSON.parse doesn't support BSON data types\n//Document is evaluated in a vm in order to support BSON data types\n//Sandbox contains BSON data type functions from node-mongodb-native\nexports.toBSON = function (string) {\n  var sandbox = exports.getSandbox();\n\n  string = string.replace(/ISODate\\(/g, 'new ISODate(');\n  string = string.replace(/Binary\\((\"[^\"]+\"),/g, 'Binary(new Buffer($1, \"base64\"),');\n\n  vm.runInNewContext('doc = eval((' + string + '));', sandbox);\n\n  return sandbox.doc;\n};\n\n// This function as the name suggests attempts to parse\n// the free form string in to BSON, since the possibilities of failure\n// are higher, this function uses a try..catch\nexports.toSafeBSON = function (string) {\n  try {\n    var bsonObject = exports.toBSON(string);\n    return bsonObject;\n  } catch (err) {\n    return null;\n  }\n};\n\n// Converts string to ObjectID.\nexports.toObjectId = function (string) {\n  var sandbox = exports.getSandbox();\n\n  // Validation\n  if (\n    !string ||                                            // No input at all\n    string === '' ||                                      // empty string\n    string.toUpperCase().indexOf('OBJECTID(') === -1 ||   // missing the opening 'ObjectID('\n    string.indexOf(')') === -1                            // missing the closing '('\n  ) {\n    return false;\n  }\n\n  // Strip quotes\n  string = string.replace('\"', '').replace('\"', '');\n\n  // Convert ObjectId(\"526ddf5a9f610ffd26000001\") to 526ddf5a9f610ffd26000001\n  string = string.replace(/ObjectID\\(/i, '').replace(')', '');\n\n  // Make sure it's a 24-character string to prevent errors.\n  if (string.length === 24) {\n    return sandbox.ObjectID(string);\n  } else {\n    return false;\n  }\n};\n\n// Convert 24-digit hex string to ObjectId\nexports.hexToObjectId = function (string) {\n  if (!/^[0-9a-f]{24}$/.test(string)) {\n    return false;\n  }\n  var sandbox = exports.getSandbox();\n  return sandbox.ObjectID(string);\n};\n\n//Convert BSON documents to string\nexports.toString = function (doc) {\n  //Use custom json stringify function from json.js\n  return json.stringify(doc, null, '    ');\n};\n\nexports.toJsonString = function (doc) {\n  let sJson = json.stringify(doc, null);\n  sJson = sJson.replace(/ObjectID\\(([^)]+)\\)/g, '{ \"$oid\": $1 }');\n  sJson = sJson.replace(/DBRef\\(([^)]+)\\)/g, '{ \"$ref\": $1 }');\n  sJson = sJson.replace(/ISODate\\(([^)]+)\\)/g, '$1');\n  return sJson;\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/json.js":"'use strict';\n\nvar mongodb = require('mongodb');\n\n//Original code from official JSON.stringify function\n//Modified to accept BSON data types\n\n/*exported f */\n// function f(n) {\n//   // Format integers to have at least two digits.\n//   return n < 10 ? '0' + n : n;\n// }\n\n/*\nif (typeof Date.prototype.toJSON !== 'function') {\n\n    Date.prototype.toJSON = function (key) {\n\n        return isFinite(this.valueOf())\n            ? this.getUTCFullYear()     + '-' +\n                f(this.getUTCMonth() + 1) + '-' +\n                f(this.getUTCDate())      + 'T' +\n                f(this.getUTCHours())     + ':' +\n                f(this.getUTCMinutes())   + ':' +\n                f(this.getUTCSeconds())   + 'Z'\n            : null;\n    };\n\n    String.prototype.toJSON      =\n        Number.prototype.toJSON  =\n        Boolean.prototype.toJSON = function (key) {\n            return this.valueOf();\n        };\n}\n*/\n\n/*exported cx */\n// var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n// eslint-disable-next-line\nvar escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = {    // table of character substitutions\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n};\nvar rep;\n\nfunction quote(string) {\n\n  // If the string contains no control characters, no quote characters, and no\n  // backslash characters, then we can safely slap some quotes around it.\n  // Otherwise we must also replace the offending characters with safe escape\n  // sequences.\n\n  escapable.lastIndex = 0;\n  return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n    var c = meta[a];\n    return typeof c === 'string' ?\n        c :\n        '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n  }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\n  // Produce a string from holder[key].\n\n  var i;          // The loop counter.\n  var k;          // The member key.\n  var v;          // The member value.\n  var length;\n  var mind = gap;\n  var partial;\n  var value = holder[key];\n\n  // If the value has a toJSON method, call it to obtain a replacement value.\n\n  //Custom code to handle BSON data types\n  if (value instanceof mongodb.ObjectID) {\n    return 'ObjectID(\"' + value + '\")';\n  } else if (value instanceof mongodb.Timestamp) {\n    return 'Timestamp(' + value.high_ + ', ' + value.low_ + ')';\n  } else if (value instanceof Date) {\n    return 'ISODate(\"' + value.toJSON() + '\")';\n  } else if (value instanceof mongodb.DBRef) {\n    if (value.db === '') {\n      return 'DBRef(\"' + value.namespace + '\", \"' + value.oid + '\")';\n    } else {\n      return 'DBRef(\"' + value.namespace + '\", \"' + value.oid + '\", \"' + value.db + '\")';\n    }\n  } else if (value instanceof mongodb.Code) {\n    return 'Code(\"' + value.code + '\")';\n  } else if (value instanceof mongodb.MinKey) {\n    return 'MinKey()';\n  } else if (value instanceof mongodb.MaxKey) {\n    return 'MaxKey()';\n  } else if (value instanceof mongodb.Symbol) {\n    return 'Symbol(\"' + value + '\")';\n  } else if (value instanceof mongodb.Binary) {\n    return 'Binary(\"' + value.toJSON(key) + '\", ' + value.sub_type +   ')';\n  }\n\n  if (value && typeof value === 'object' &&\n          typeof value.toJSON === 'function') {\n    value = value.toJSON(key);\n  }\n\n  // If we were called with a replacer function, then call the replacer to\n  // obtain a replacement value.\n\n  if (typeof rep === 'function') {\n    value = rep.call(holder, key, value);\n  }\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n    case 'string':\n      return quote(value);\n\n    case 'number':\n\n      // JSON numbers must be finite. Encode non-finite numbers as null.\n\n      return isFinite(value) ? String(value) : 'null';\n\n    case 'boolean':\n    case 'null':\n\n      // If the value is a boolean or null, convert it to a string. Note:\n      // typeof null does not produce 'null'. The case is included here in\n      // the remote chance that this gets fixed someday.\n\n      return String(value);\n\n    // If the type is 'object', we might be dealing with an object or an array or\n    // null.\n\n    case 'object':\n\n      // Due to a specification blunder in ECMAScript, typeof null is 'object',\n      // so watch out for that case.\n\n      if (!value) {\n        return 'null';\n      }\n\n      // Make an array to hold the partial results of stringifying this object value.\n\n      gap += indent;\n      partial = [];\n\n      // Is the value an array?\n\n      if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n        // The value is an array. Stringify every element. Use null as a placeholder\n        // for non-JSON values.\n\n        length = value.length;\n        for (i = 0; i < length; i += 1) {\n          partial[i] = str(i, value) || 'null';\n        }\n\n        // Join all of the elements together, separated with commas, and wrap them in\n        // brackets.\n\n        v = partial.length === 0 ?\n            '[]' :\n            gap ?\n            '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n            '[' + partial.join(',') + ']';\n        gap = mind;\n        return v;\n      }\n\n      // If the replacer is an array, use it to select the members to be stringified.\n\n      if (rep && typeof rep === 'object') {\n        length = rep.length;\n        for (i = 0; i < length; i += 1) {\n          if (typeof rep[i] === 'string') {\n            k = rep[i];\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      } else {\n\n        // Otherwise, iterate through all of the keys in the object.\n\n        for (k in value) {\n          if (Object.prototype.hasOwnProperty.call(value, k)) {\n            v = str(k, value);\n            if (v) {\n              partial.push(quote(k) + (gap ? ': ' : ':') + v);\n            }\n          }\n        }\n      }\n\n      // Join all of the member texts together, separated with commas,\n      // and wrap them in braces.\n\n      v = partial.length === 0 ?\n          '{}' :\n          gap ?\n          '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n          '{' + partial.join(',') + '}';\n      gap = mind;\n      return v;\n\n    default:\n      console.log('Unexpected Object Type', typeof value, value);\n      break;\n  }\n}\n\n// If the JSON object does not yet have a stringify method, give it one.\n\nexports.stringify = function (value, replacer, space) {\n\n  // The stringify method takes a value and an optional replacer, and an optional\n  // space parameter, and returns a JSON text. The replacer can be a function\n  // that can replace values, or an array of strings that will select the keys.\n  // A default replacer method can be provided. Use of the space parameter can\n  // produce text that is more easily readable.\n\n  var i;\n  gap = '';\n  indent = '';\n\n  // If the space parameter is a number, make an indent string containing that\n  // many spaces.\n\n  if (typeof space === 'number') {\n    for (i = 0; i < space; i += 1) {\n      indent += ' ';\n    }\n\n  // If the space parameter is a string, it will be used as the indent string.\n\n  } else if (typeof space === 'string') {\n    indent = space;\n  }\n\n  // If there is a replacer, it must be a function or an array.\n  // Otherwise, throw an error.\n\n  rep = replacer;\n  if (replacer && typeof replacer !== 'function' &&\n          (typeof replacer !== 'object' ||\n          typeof replacer.length !== 'number')) {\n    throw new Error('JSON.stringify');\n  }\n\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n\n  return str('', { '': value });\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/utils.js":"'use strict';\n\nconst _ = require('lodash');\n\n// Given some size in bytes, returns it in a converted, friendly size\n// credits: http://stackoverflow.com/users/1596799/aliceljm\nexports.bytesToSize = function bytesToSize(bytes) {\n  if (bytes === 0) return '0 Byte';\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];\n};\n\nexports.colsToGrid = function (cols) {\n  // Generate list of GridFS buckets\n  // takes databases, filters by having suffix of '.files' and also a corresponding '.chunks' in the DB list, then returns just the prefix name.\n\n  // cols comes in an object of all databases and all their collections\n  // return an object of all databases and all potential GridFS x.files & x.chunks\n\n  var rets = _.clone(cols);\n\n  _.each(rets, (val, key) => {\n    rets[key] = _.map(\n      _.filter(rets[key], col =>\n        col.toString().substr(-6) === '.files' && _.intersection(rets[key], [col.toString().slice(0, -6) + '.chunks'])\n      ),\n      col => col.toString().slice(0, -6)\n    ).sort();\n  });\n\n  return rets;\n};\n\nexports.deepmerge = function (target, src) {\n  var array = Array.isArray(src);\n  var dst = array ? [] : {};\n\n  if (array) {\n    target = target || [];\n    dst = dst.concat(target);\n    src.forEach(function (e, i) {\n      if (typeof dst[i] === 'undefined') {\n        dst[i] = e;\n      } else if (typeof e === 'object') {\n        dst[i] = exports.deepmerge(target[i], e);\n      } else {\n        if (target.indexOf(e) === -1) {\n          dst.push(e);\n        }\n      }\n    });\n  } else {\n    if (target && typeof target === 'object') {\n      Object.keys(target).forEach(function (key) {\n        dst[key] = target[key];\n      });\n    }\n\n    Object.keys(src).forEach(function (key) {\n      if (typeof src[key] !== 'object' || !src[key]) {\n        dst[key] = src[key];\n      } else {\n        if (!target[key]) {\n          dst[key] = src[key];\n        } else {\n          dst[key] = exports.deepmerge(target[key], src[key]);\n        }\n      }\n    });\n  }\n\n  return dst;\n};\n\nexports.roughSizeOfObject = function (object) {\n\n  var objectList = [];\n  var recurse = function (value) {\n    var bytes = 0;\n\n    if (typeof value === 'boolean') {\n      bytes = 4;\n    } else if (typeof value === 'string') {\n      bytes = value.length * 2;\n    } else if (typeof value === 'number') {\n      bytes = 8;\n    } else if (typeof value === 'object' && objectList.indexOf(value) === -1) {\n      objectList[objectList.length] = value;\n\n      for (var i in value) {\n        bytes += 8; // an assumed existence overhead\n        bytes += recurse(value[i]);\n      }\n    }\n\n    return bytes;\n  };\n\n  return recurse(object);\n};\n\n\nexports.buildCollectionURL = function (base, dbName, collectionName) {\n  return base + 'db/' + dbName + '/' + encodeURIComponent(collectionName);\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/csv.js":"'use strict';\n\nvar flat = require('flat');\nvar csv = require('json2csv');\nvar isPlainObject = require('lodash').isPlainObject;\n\nvar handleObject = function (data) {\n  for (var x in data) {\n    if (data[x] && data[x].constructor.name === 'ObjectID') {\n      data[x] = ['ObjectId(\"', data[x], '\")'].join('');\n    } else if (isPlainObject(data[x])) {\n      handleObject(data[x]);\n    }\n  }\n};\n\nmodule.exports = function (data) {\n  for (var i = 0, ii = data.length; i < ii; i++) {\n    var current = data[i];\n    handleObject(current);\n    data[i] = flat(current, { safe: true });\n  }\n  return csv({ data: data });\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/routes/database.js":"'use strict';\n\nvar utils = require('../utils');\n\nvar routes = function () {\n  var exp = {};\n\n  exp.viewDatabase = function (req, res) {\n\n    req.updateCollections(req.db, req.dbName, function (error) {\n      if (error) {\n        req.session.error = 'Could not refresh collections. ' + JSON.stringify(error);\n        console.error(error);\n        return res.redirect('back');\n      }\n\n      req.db.stats(function (error, data) {\n        if (error) {\n          req.session.error = 'Could not get stats. ' + JSON.stringify(error);\n          console.error(error);\n          return res.redirect('back');\n        }\n\n        var ctx = {\n          title: 'Viewing Database: ' + req.dbName,\n          databases:  req.databases,\n          colls:      req.collections[req.dbName],\n          grids:      req.gridFSBuckets[req.dbName],\n          stats: {\n            avgObjSize:         utils.bytesToSize(data.avgObjSize || 0),\n            collections:        data.collections,\n            dataFileVersion:    (data.dataFileVersion && data.dataFileVersion.major && data.dataFileVersion.minor ?\n              data.dataFileVersion.major + '.' + data.dataFileVersion.minor :\n              null),\n            dataSize:           utils.bytesToSize(data.dataSize),\n            extentFreeListNum:  (data.extentFreeList && data.extentFreeList.num ? data.extentFreeList.num : null),\n            fileSize:           (typeof data.fileSize !== 'undefined' ? utils.bytesToSize(data.fileSize) : null),\n            indexes:            data.indexes,\n            indexSize:          utils.bytesToSize(data.indexSize),\n            numExtents:         data.numExtents.toString(),\n            objects:            data.objects,\n            storageSize:        utils.bytesToSize(data.storageSize),\n          },\n        };\n        res.render('database', ctx);\n      });\n    });\n  };\n\n  exp.addDatabase = function (req, res) {\n\n    var name = req.body.database;\n\n    if (name === undefined || name.length === 0) {\n      //TODO: handle error\n      console.error('That database name is invalid.');\n      req.session.error = 'That database name is invalid.';\n      return res.redirect('back');\n    }\n\n    //Database names must begin with a letter or underscore, and can contain only letters, underscores, numbers or dots\n    if (!name.match(/^[a-zA-Z_][a-zA-Z0-9._]*$/)) {\n      //TODO: handle error\n      console.error('That database name is invalid.');\n      req.session.error = 'That database name is invalid.';\n      return res.redirect('back');\n    }\n\n    var ndb = req.mainConn.db(name);\n\n    ndb.createCollection('delete_me', function (err) {\n      if (err) {\n        //TODO: handle error\n        console.error('Could not create collection.');\n        req.session.error = 'Could not create collection.';\n        return res.redirect('back');\n      }\n\n      res.redirect(res.locals.baseHref);\n\n      // ndb.dropCollection('delete_me', function(err) {\n      //   if (err) {\n      //     //TODO: handle error\n      //     console.error('Could not delete collection.');\n      //     req.session.error = 'Could not delete collection.';\n      //     return res.redirect('back');\n      //   }\n      //   res.redirect(res.locals.baseHref + 'db/' + name);\n      // });\n    });\n\n  };\n\n  exp.deleteDatabase = function (req, res) {\n    req.db.dropDatabase(function (err) {\n      if (err) {\n        //TODO: handle error\n        console.error('Could not to delete database.');\n        req.session.error = 'Failed to delete database.';\n        return res.redirect('back');\n      }\n\n      res.redirect(res.locals.baseHref);\n    });\n  };\n\n  return exp;\n};\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/routes/document.js":"'use strict';\n\nvar bson = require('../bson');\nconst buildCollectionURL = require('../utils').buildCollectionURL;\n\n\nvar routes = function (config) {\n  var exp = {};\n\n  exp.getProperty = function (req, res) {\n    // Get a single property\n    // URI like database/collection/document/prop\n    res.send(req.prop);\n  };\n\n  exp.viewDocument = function (req, res) {\n    var ctx = {\n      title: (config.options.readOnly ? 'Viewing' : 'Editing') + ' Document: ' + req.document._id,\n      editorTheme: config.options.editorTheme,\n      docLength: bson.toString(req.document).split(/\\r\\n|\\r|\\n/).length,\n      docString: bson.toString(req.document),\n    };\n\n    res.render('document', ctx);\n  };\n\n  exp.checkValid = function (req, res) {\n    var doc = req.body.document;\n    try {\n      bson.toBSON(doc);\n    } catch (err) {\n      console.error(err);\n      return res.send('Invalid');\n    }\n\n    res.send('Valid');\n  };\n\n  exp.addDocument = function (req, res) {\n    var doc = req.body.document;\n\n    if (doc === undefined || doc.length === 0) {\n      req.session.error = 'You forgot to enter a document!';\n      return res.redirect('back');\n    }\n\n    var docBSON;\n\n    try {\n      docBSON = bson.toBSON(doc);\n    } catch (err) {\n      req.session.error = 'That document is not valid!';\n      console.error(err);\n      return res.redirect('back');\n    }\n\n    req.collection.insert(docBSON, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document added!';\n      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));\n    });\n  };\n\n  exp.updateDocument = function (req, res) {\n    var doc = req.body.document;\n\n    if (doc === undefined || doc.length === 0) {\n      req.session.error = 'You forgot to enter a document!';\n      return res.redirect('back');\n    }\n\n    var docBSON;\n    try {\n      docBSON = bson.toBSON(doc);\n    } catch (err) {\n      req.session.error = 'That document is not valid!';\n      console.error(err);\n      return res.redirect('back');\n    }\n\n    docBSON._id = req.document._id;\n\n    req.collection.update(req.document, docBSON, { safe: true }, function (err) {\n      if (err) {\n        //document was not saved\n        req.session.error = 'Something went wrong: ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document updated!';\n      res.redirect(buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName));\n    });\n  };\n\n  exp.deleteDocument = function (req, res) {\n    const skip            = req.query.skip        || '';\n    const key             = req.query.key         || '';\n    const value           = req.query.value       || '';\n    const type            = req.query.type        || '';\n    const jsonQuery       = req.query.query       || '';\n    const jsonProjection  = req.query.projection  || '';\n\n    req.collection.remove(req.document, { safe: true }, function (err) {\n      if (err) {\n        req.session.error = 'Something went wrong! ' + err;\n        console.error(err);\n        return res.redirect('back');\n      }\n\n      req.session.success = 'Document deleted! _id: ' + req.document._id;\n      res.redirect(\n        buildCollectionURL(res.locals.baseHref, req.dbName, req.collectionName) +\n        `?skip=${skip}&key=${key}&value=${value}&type=${type}&query=${jsonQuery}&projection=${jsonProjection}`\n      );\n    });\n  };\n\n  return exp;\n};\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/routes/gridfs.js":"'use strict';\n\nvar _             = require('lodash');\nvar Busboy        = require('busboy');\nvar GridFSStream  = require('gridfs-stream');\nvar mongo         = require('mongodb');\nvar utils         = require('../utils');\n\n// var routes = function(config) {\nvar routes = function () {\n  var exp = {};\n\n  //view all files in a bucket\n  exp.viewBucket = function (req, res) {\n\n    var files   = req.files;\n    var columns = ['filename', 'length']; // putting these here keeps them at the front/left\n\n    var statsAvgChunk  = utils.bytesToSize(files.reduce((prev, curr) => prev + curr.chunkSize, 0) / files.length);\n    var statsTotalSize = utils.bytesToSize(files.reduce((prev, curr) => prev + curr.length, 0));\n\n    // Iterate through files for a cleanup\n    for (var f in files) {\n      columns.push(Object.keys(files[f]));                        // Generate an array of columns used by all documents visible on this page\n      files[f].length     = utils.bytesToSize(files[f].length);   // Filesizes to something more readable\n      delete files[f].chunkSize;                                   // Already taken the average above, no need;\n    }\n\n    columns = _.uniq(_.flatten(columns));\n    columns.splice(columns.indexOf('_id'), 1);\n    columns.splice(columns.indexOf('chunkSize'), 1);\n\n    var ctx = {\n      buckets: res.locals.gridFSBuckets[req.dbName],\n      columns: columns,\n      files: req.files,\n      title: 'Viewing Bucket: ' + req.bucketName,\n      stats: {\n        avgChunk:  statsAvgChunk,\n        totalSize: statsTotalSize,\n      },\n    };\n\n    res.render('gridfs', ctx);\n\n  };\n\n  // upload a file\n  exp.addFile = function (req, res) {\n    var busboy      = new Busboy({ headers: req.headers });\n    var newFileID   = new mongo.ObjectId();\n\n    // Override the bucket name with what is currently selected\n    // https://github.com/aheckmann/gridfs-stream/blob/a3b7c4e48a08ac625cf7564304c83e56d6b93821/lib/index.js#L31\n    mongo.GridStore.DEFAULT_ROOT_COLLECTION = req.bucketName;\n\n    var gfs         = new GridFSStream(req.db, mongo);\n\n    busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {\n\n      if (!filename) {\n        req.session.error = 'No filename.';\n        return res.redirect('back');\n      }\n\n      var writeStream = gfs.createWriteStream({\n        _id: newFileID,\n        filename: filename,\n        mode: 'w',\n        content_type: mimetype,\n      });\n      file.pipe(writeStream);\n    }).on('finish', function () {\n      req.session.success = 'File uploaded!';\n\n      setTimeout(function () {\n        // short delay to allow Mongo to finish syncing\n        return res.redirect('back');\n      }, 500);\n    });\n\n    req.pipe(busboy);\n\n  };\n\n  // download a file\n  exp.getFile = function (req, res) {\n\n    // Override the bucket name with what is currently selected\n    // https://github.com/aheckmann/gridfs-stream/blob/a3b7c4e48a08ac625cf7564304c83e56d6b93821/lib/index.js#L31\n    mongo.GridStore.DEFAULT_ROOT_COLLECTION = req.bucketName;\n\n    var gfs = new GridFSStream(req.db, mongo);\n\n    gfs.findOne({ _id: req.fileID }, function (err, file) {\n      if (err) {\n        console.error(err);\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      if (!file) {\n        console.error('No file');\n        req.session.error = 'File not found!';\n        return res.redirect('back');\n      }\n\n      res.set('Content-Type', file.contentType);\n      res.set('Content-Disposition', 'attachment; filename=\"' + encodeURI(file.filename) + '\"');\n\n      var readstream = gfs.createReadStream({\n        _id: file._id,\n      });\n\n      readstream.on('error', function (err) {\n        console.error('Got error while processing stream ' + err.message);\n        req.session.error = 'Error: ' + err;\n        res.end();\n      });\n\n      readstream.pipe(res);\n    });\n  };\n\n  // delete a file\n  exp.deleteFile = function (req, res) {\n    // Override the bucket name with what is currently selected\n    // https://github.com/aheckmann/gridfs-stream/blob/a3b7c4e48a08ac625cf7564304c83e56d6b93821/lib/index.js#L31\n    mongo.GridStore.DEFAULT_ROOT_COLLECTION = req.bucketName;\n\n    var gfs = new GridFSStream(req.db, mongo);\n\n    gfs.remove({ _id: req.fileID }, function (err) {\n      if (err) {\n        req.session.error = 'Error: ' + err;\n        return res.redirect('back');\n      }\n\n      req.session.success = 'File _id: \"' + req.fileID + '\" deleted! ';\n      setTimeout(function () {\n        // short delay to allow Mongo to finish syncing\n        return res.redirect('back');\n      }, 500);\n    });\n  };\n\n  // add bucket\n  exp.addBucket = function (req, res) {\n    req.session.error('addBucket not implemented yet');\n    res.redirect('back');\n\n    // req.session.success = 'Bucket created!';\n  };\n\n  // delete bucket\n  exp.deleteBucket = function (req, res) {\n    req.session.error('deleteBucket not implemented yet');\n    res.redirect('back');\n\n    // req.session.success = 'Bucket deleted!';\n  };\n\n  exp.renameBucket = function (req, res) {\n    req.session.error('renameBucket not implemented yet');\n    res.redirect('back');\n  };\n\n  return exp;\n};\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/config.default.js":"'use strict';\n\nvar mongo;\nvar url = require('url');\n\nif (typeof process.env.MONGODB_PORT === 'string') {\n  var mongoConnection = url.parse(process.env.MONGODB_PORT);\n  process.env.ME_CONFIG_MONGODB_SERVER  = mongoConnection.hostname;\n  process.env.ME_CONFIG_MONGODB_PORT    = mongoConnection.port;\n}\n\n// Accesing Bluemix variable to get MongoDB info\nif (process.env.VCAP_SERVICES) {\n  var dbLabel = 'mongodb-2.4';\n  var env = JSON.parse(process.env.VCAP_SERVICES);\n  if (env[dbLabel]) {\n    mongo = env[dbLabel][0].credentials;\n  }\n} else {\n  mongo = {\n    db:       'db',\n    host:     'localhost',\n    password: 'pass',\n    port:     27017,\n    ssl:      false,\n    url:      'mongodb://localhost:27017/db',\n    username: 'admin',\n  };\n}\n\nvar meConfigMongodbServer = process.env.ME_CONFIG_MONGODB_SERVER ? process.env.ME_CONFIG_MONGODB_SERVER.split(',') : false;\n\nmodule.exports = {\n  mongodb: {\n    //server: mongodb hostname or IP address\n    //for replica set, use array of string instead\n    server: (meConfigMongodbServer.length > 1 ? meConfigMongodbServer : meConfigMongodbServer[0]) || mongo.host,\n    port:   process.env.ME_CONFIG_MONGODB_PORT    || mongo.port,\n\n    //ssl: connect to the server using secure SSL\n    ssl: process.env.ME_CONFIG_MONGODB_SSL || mongo.ssl,\n\n    //sslValidate: validate mongod server certificate against CA\n    sslValidate: process.env.ME_CONFIG_MONGODB_SSLVALIDATE || true,\n\n    //sslCA: array of valid CA certificates\n    sslCA:  [],\n\n    //autoReconnect: automatically reconnect if connection is lost\n    autoReconnect: true,\n\n    //poolSize: size of connection pool (number of connections to use)\n    poolSize: 4,\n\n    //set admin to true if you want to turn on admin features\n    //if admin is true, the auth list below will be ignored\n    //if admin is true, you will need to enter an admin username/password below (if it is needed)\n    admin: process.env.ME_CONFIG_MONGODB_ENABLE_ADMIN ? process.env.ME_CONFIG_MONGODB_ENABLE_ADMIN.toLowerCase() === 'true' : false,\n\n    // >>>>  If you are using regular accounts, fill out auth details in the section below\n    // >>>>  If you have admin auth, leave this section empty and skip to the next section\n    auth: [\n      /*\n       * Add the name, username, and password of the databases you want to connect to\n       * Add as many databases as you want!\n       */\n      {\n        database: process.env.ME_CONFIG_MONGODB_AUTH_DATABASE || mongo.db,\n        username: process.env.ME_CONFIG_MONGODB_AUTH_USERNAME || mongo.username,\n        password: process.env.ME_CONFIG_MONGODB_AUTH_PASSWORD || mongo.password,\n      },\n    ],\n\n    //  >>>>  If you are using an admin mongodb account, or no admin account exists, fill out section below\n    //  >>>>  Using an admin account allows you to view and edit all databases, and view stats\n\n    //leave username and password empty if no admin account exists\n    adminUsername: process.env.ME_CONFIG_MONGODB_ADMINUSERNAME || '',\n    adminPassword: process.env.ME_CONFIG_MONGODB_ADMINPASSWORD || '',\n\n    //whitelist: hide all databases except the ones in this list  (empty list for no whitelist)\n    whitelist: [],\n\n    //blacklist: hide databases listed in the blacklist (empty list for no blacklist)\n    blacklist: [],\n  },\n\n  site: {\n    // baseUrl: the URL that mongo express will be located at - Remember to add the forward slash at the start and end!\n    baseUrl: process.env.ME_CONFIG_SITE_BASEURL || '/',\n    cookieKeyName: 'mongo-express',\n    cookieSecret:     process.env.ME_CONFIG_SITE_COOKIESECRET   || 'cookiesecret',\n    host:             process.env.VCAP_APP_HOST                 || 'localhost',\n    port:             process.env.VCAP_APP_PORT                 || 8081,\n    requestSizeLimit: process.env.ME_CONFIG_REQUEST_SIZE        || '50mb',\n    sessionSecret:    process.env.ME_CONFIG_SITE_SESSIONSECRET  || 'sessionsecret',\n    sslCert:          process.env.ME_CONFIG_SITE_SSL_CRT_PATH   || '',\n    sslEnabled:       process.env.ME_CONFIG_SITE_SSL_ENABLED    || false,\n    sslKey:           process.env.ME_CONFIG_SITE_SSL_KEY_PATH   || '',\n  },\n\n  //set useBasicAuth to true if you want to authenticate mongo-express loggins\n  //if admin is false, the basicAuthInfo list below will be ignored\n  //this will be true unless ME_CONFIG_BASICAUTH_USERNAME is set and is the empty string\n  useBasicAuth: process.env.ME_CONFIG_BASICAUTH_USERNAME !== '',\n\n  basicAuth: {\n    username: process.env.ME_CONFIG_BASICAUTH_USERNAME || 'admin',\n    password: process.env.ME_CONFIG_BASICAUTH_PASSWORD || 'pass',\n  },\n\n  options: {\n    // Display startup text on console\n    console: true,\n\n    //documentsPerPage: how many documents you want to see at once in collection view\n    documentsPerPage: 10,\n\n    //editorTheme: Name of the theme you want to use for displaying documents\n    //See http://codemirror.net/demo/theme.html for all examples\n    editorTheme: process.env.ME_CONFIG_OPTIONS_EDITORTHEME || 'rubyblue',\n\n    // Maximum size of a single property & single row\n    // Reduces the risk of sending a huge amount of data when viewing collections\n    maxPropSize: (100 * 1000),  // default 100KB\n    maxRowSize: (1000 * 1000),  // default 1MB\n\n    //The options below aren't being used yet\n\n    //cmdType: the type of command line you want mongo express to run\n    //values: eval, subprocess\n    //  eval - uses db.eval. commands block, so only use this if you have to\n    //  subprocess - spawns a mongo command line as a subprocess and pipes output to mongo express\n    cmdType: 'eval',\n\n    //subprocessTimeout: number of seconds of non-interaction before a subprocess is shut down\n    subprocessTimeout: 300,\n\n    //readOnly: if readOnly is true, components of writing are not visible.\n    readOnly: false,\n\n    //collapsibleJSON: if set to true, jsons will be displayed collapsible\n    collapsibleJSON: true,\n\n    //collapsibleJSONDefaultUnfold: if collapsibleJSON is set to `true`, this defines default level\n    //  to which JSONs are displayed unfolded; use number or \"all\" to unfold all levels\n    collapsibleJSONDefaultUnfold: 1,\n\n    //gridFSEnabled: if gridFSEnabled is set to 'true', you will be able to manage uploaded files ( ak. grids, gridFS )\n    gridFSEnabled: process.env.ME_CONFIG_SITE_GRIDFS_ENABLED || false,\n\n    // logger: this object will be used to initialize router logger (morgan)\n    logger: {},\n  },\n\n  // Specify the default keyname that should be picked from a document to display in collections list.\n  // Keynames can be specified for every database and collection.\n  // If no keyname is specified, it defaults to '_id', which is a mandatory field.\n  // For Example :\n  // defaultKeyNames{\n  //   \"world_db\":{  //Database Name\n  //     \"continent\":\"cont_name\", // collection:field\n  //     \"country\":\"country_name\",\n  //     \"city\":\"name\"\n  //   }\n  // }\n  defaultKeyNames: {\n\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/.eslintrc.js":"module.exports = {\n  extends: \"airbnb-base\",\n  parserOptions: {\n    \"sourceType\": \"script\",\n  },\n  env: {\n    node: true,\n    es6: true\n  },\n  plugins: [\n    \"import\",\n    \"lodash\"\n  ],\n  rules: {\n    \"strict\": [\"error\", \"global\"],\n    \"global-require\":[\"off\"],\n    \"comma-dangle\": [\"error\", \"always-multiline\"],\n    \"func-names\": [\"off\"],\n    \"new-cap\": [\"off\"],\n    \"consistent-return\": [\"off\"],\n    \"no-lonely-if\": [\"off\"],\n    \"no-console\": [\"off\"],\n    \"vars-on-top\": [\"off\"],\n    \"no-param-reassign\": [\"off\"],\n    \"prefer-arrow-callback\": [\"off\"],\n    \"no-else-return\": [\"off\"],\n    \"no-nested-ternary\": [\"off\"],\n\n    \"no-restricted-syntax\": [\"off\"],\n    \"no-mixed-operators\": [\"off\"],\n    \"no-plusplus\": [\"off\"],\n    \"guard-for-in\": [\"off\"],\n    \"no-continue\": [\"off\"],\n\n    \"no-multi-spaces\": [\"off\"],\n    \"key-spacing\": [\"off\"],\n    \"max-len\": [\"error\", 150, 2],\n    \"spaced-comment\": [\"off\"],\n    \"brace-style\": [\"warn\", \"1tbs\"],\n    \"prefer-template\": [\"off\"],\n    \"padded-blocks\": [\"off\"],\n    \"no-underscore-dangle\": [\"off\"],\n\n    \"import/no-extraneous-dependencies\": [\"error\", {\n      \"devDependencies\": [\n        \"**/test/**/*.js\",\n        \"**/scripts/*.js\",\n        \"**/webpack.config.js\",\n      ]\n    }],\n\n    \"lodash/callback-binding\": [\"error\"],\n    \"lodash/collection-method-value\": [\"error\"],\n    \"lodash/collection-return\": [\"error\"],\n    \"lodash/no-double-unwrap\": [\"error\"],\n    \"lodash/no-extra-args\": [\"error\"],\n    \"lodash/no-unbound-this\": [\"error\"],\n    \"lodash/unwrap\": [\"error\"],\n\n    // To be turned on\n    \"no-var\": [\"off\"],\n    \"prefer-const\": [\"off\"],\n    \"object-shorthand\": [\"off\"],\n    \"no-path-concat\": [\"off\"],\n    \"no-shadow\": [\"off\", {allow: [\"err\", \"error\"]}],\n    \"camelcase\": [\"off\"],\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/webpack.config.js":"'use strict';\n\nconst webpack = require('webpack');\nconst path = require('path');\nconst AssetsPlugin = require('assets-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n\nconst env = process.env.NODE_ENV || 'development';\nconst isDev = env === 'development';\nconst isProd = !isDev;\n\nconst fileSuffix = isDev ? '' : '-[chunkhash].min';\n\nfunction resolveModulePath(name) {\n  const packageJson = '/package.json';\n  return require.resolve(`${name}${packageJson}`).replace(packageJson, '');\n}\n\nconst codemirrorPath = resolveModulePath('codemirror');\nconst bootstrapPath = resolveModulePath('bootstrap');\n\nmodule.exports = {\n  entry: {\n    index: './lib/scripts/index.js',\n    database: './lib/scripts/database.js',\n    collection: './lib/scripts/collection.js',\n    document: './lib/scripts/document.js',\n    gridfs: './lib/scripts/gridfs.js',\n\n    vendor: './lib/scripts/vendor.js',\n    codemirror: './lib/scripts/codeMirrorLoader.js',\n  },\n  output: {\n    filename: `[name]${fileSuffix}.js`,\n    path: path.join(__dirname, 'build'),\n    publicPath: 'public/',\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /.js$/,\n        loader: 'babel-loader',\n        exclude: /(node_modules)/,\n        query: {\n          presets: ['es2015'],\n        },\n      },\n    ],\n  },\n\n  plugins: [\n    new CleanWebpackPlugin(['build']),\n\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(env),\n      __DEV__: isDev,\n    }),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      names: ['codemirror', 'vendor'],\n      filename: `[name]${fileSuffix}.js`,\n    }),\n\n    isProd && (new webpack.optimize.UglifyJsPlugin()),\n    isProd && (new webpack.optimize.OccurrenceOrderPlugin(true)),\n\n    new CopyWebpackPlugin([\n      { from: 'public/images/*', to: 'img/[name].[ext]' },\n      { from: 'public/stylesheets/*', to: 'css/[name].[ext]' },\n\n      { from: `${codemirrorPath}/lib/codemirror.css`, to: 'css/[name].[ext]' },\n      { from: `${codemirrorPath}/theme/*`, to: 'css/theme/[name].[ext]' },\n\n      { from: `${bootstrapPath}/dist/fonts/*`, to: 'fonts/[name].[ext]' },\n      { from: `${bootstrapPath}/dist/css/bootstrap.min.css`, to: 'css/[name].[ext]' },\n      { from: `${bootstrapPath}/dist/css/bootstrap.min.css.map`, to: 'css/[name].[ext]' },\n      { from: `${bootstrapPath}/dist/css/bootstrap-theme.min.css`, to: 'css/[name].[ext]' },\n      { from: `${bootstrapPath}/dist/css/bootstrap-theme.min.css.map`, to: 'css/[name].[ext]' },\n    ]),\n\n    new AssetsPlugin({ filename: 'build-assets.json' }),\n  ].filter(n => !!n),\n};\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/scripts/codeMirrorLoader.js":"import CodeMirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\n\nexport default CodeMirror;\n","/home/travis/build/npmtest/node-npmtest-mongo-express/node_modules/mongo-express/lib/scripts/jQueryLoader.js":"import $ from 'jquery';\n\nwindow.$ = window.jQuery = $;\n"}